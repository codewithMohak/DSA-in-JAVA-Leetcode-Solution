//Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
//A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

import java.util.*;

class Solution {
    public List<String> letterCombinations(String digits) {
        String[] gro = {
            "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };
        
        List<String> result = new ArrayList<>();
        
        if (digits == null || digits.isEmpty()) {
            return result;
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer("");

        for (char digit : digits.toCharArray()) {
            String letters = gro[digit - '0'];

            int size = queue.size();

            for (int i = 0; i < size; i++) {
                String current = queue.poll();

                for (char letter : letters.toCharArray()) {
                    queue.offer(current + letter);
                }
            }
        }
        
        result.addAll(queue);
        
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        System.out.println(solution.letterCombinations("23"));
        System.out.println(solution.letterCombinations(""));
        System.out.println(solution.letterCombinations("2"));
    }
}
